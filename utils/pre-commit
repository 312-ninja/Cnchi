#!/bin/bash

# looks for a file name info.py in the src directory,
# the contents of which should be a semantic version number
# such as "1.2.3"

# this script will display the current version, automatically
# suggest a "minor" version update, and ask for input to use
# the suggestion, or a newly entered value.

# once the new version number is determined, the script will
# pull a list of changes from git history, prepend this to
# a file called CHANGES (under the title of the new version
# number) and create a GIT tag.


INFO_PY="cnchi/info.py"



if [[ -e "${INFO_PY}" ]]; then
	BASE_STRING=$(python ${INFO_PY})
	BASE_LIST=($(echo $BASE_STRING | tr '.' ' '))
	V_MAJOR=${BASE_LIST[0]}
	V_MINOR=${BASE_LIST[1]}
	V_PATCH=${BASE_LIST[2]}
	echo "Current version : $BASE_STRING"
	V_PATCH=$((V_PATCH + 1))
	SUGGESTED_VERSION="$V_MAJOR.$V_MINOR.$V_PATCH"

	echo "Will set new version to be $SUGGESTED_VERSION"
	sed -i "s|$BASE_STRING|$SUGGESTED_VERSION|g" ${INFO_PY}
	git log --pretty=format:"[%ai] %<(69,trunc) %s %><(15) %aN {%h}" --cherry-pick "v0.12.0"...HEAD > CHANGES

	echo "updating update.info..."
	python utils/generate_update_info.py

	echo "checking file permissions..."
	utils/fix-permissions.sh

	echo "checking for changes to pre-commit hook..."
	if [[ utils/pre-commit -nt .git/hooks/pre-commit ]]; then
		echo "updating pre-commit hook..."
		cp utils/pre-commit .git/hooks
	fi

	git add CHANGES ${INFO_PY} update.info

	exit 0;
else
	echo "Could not find a VERSION file"
	exit 1;

fi
