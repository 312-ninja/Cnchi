#!/bin/bash

# looks for a file name info.py in the src directory,
# the contents of which should be a semantic version number
# such as "1.2.3"

# this script will display the current version, automatically
# suggest a "minor" version update, and ask for input to use
# the suggestion, or a newly entered value.

# once the new version number is determined, the script will
# pull a list of changes from git history, prepend this to
# a file called CHANGES (under the title of the new version
# number) and create a GIT tag.


INFO_PY='cnchi/info.py'

echo 'checking for changes to pre-commit hook...'
if [[ utils/pre-commit -nt .git/hooks/pre-commit ]]; then
	echo 'updating pre-commit hook...'
	cp utils/pre-commit .git/hooks
	chmod +x .git/hooks/pre-commit
	# Run updated pre-commit hook script
	.git/hooks/pre-commit
	# Exit with the exit status of the updated script.
	exit $?
fi

# Exit with failed status if we cannot find info.py
[[ -e "${INFO_PY}" ]] || { echo 'Could not find a info.py!'; exit 1; }


BASE_STRING=$(python3 "${INFO_PY}")
BASE_LIST=($(echo "${BASE_STRING}" | tr '.' ' '))
V_MAJOR="${BASE_LIST[0]}"
V_MINOR="${BASE_LIST[1]}"
V_PATCH="${BASE_LIST[2]}"

echo "Current version : ${BASE_STRING}"
V_PATCH=$((V_PATCH + 1))
SUGGESTED_VERSION="${V_MAJOR}.${V_MINOR}.${V_PATCH}"

echo "New version : ${SUGGESTED_VERSION}"
sed -i "s|${BASE_STRING}|${SUGGESTED_VERSION}|g" "${INFO_PY}"

echo 'Updating CHANGES file...'
git log --pretty=format:"[%ai] %<(69,trunc) %s %><(15) %aN {%h}" --cherry-pick "v0.14.0"...HEAD > CHANGES

echo "Updating latest.json..."
python utils/generate_update_info.py

echo "Checking file permissions..."
utils/fix-permissions.sh

git add CHANGES "${INFO_PY}" dist/latest.json && exit 0;

